#+TITLE: Introduction to Clojure
#+AUTHOR: John Herrlin
#+EMAIL: jherrlin@gmail.com
#+DATE: <2021-10-05 Tue>


* Me

  John Herrlin

  @jherrlin

  User of Emacs and the GNU system.

  Link to the presentation:
  https://github.com/jherrlin/clojure-presentation

* Overview

  Clojure is a language within the Lisp family of programming languages. There
  are many other languages in the Lisp family. For example Common Lisp, Racket,
  Guile and Emacs Lisp.


  Lisp was born in 1958 at MIT and is one of the oldest programming languages.


  Stackoverflow survey states that Clojure is the [[https://insights.stackoverflow.com/survey/2021#top-paying-technologies][number 1 of the top paying technologies]].


  Rich Hickey is the author of Clojure and have a lot of interesting talks where
  he presents the ideas and mechanics of Clojure. [[https://www.youtube.com/results?search_query=rich+hickey][Here]] is a list.


  Clojure is backed by the company Nubank, the largest financial technology in
  Latin America. Nubank heavily uses Clojure and Datomic (database).

* Clojure in Växjö

  There are Clojure applications running in production in a few companies. Here
  are a few examples:

  Here are a few of them:
  - KP System
  - HRM
  - Readly
  - Gears of Leo


* Hosted language

  Clojure is a hosted language and can run on many different platforms.

  Here are the most famous ones:
  - JVM (Java, Scala, Kotlin, Groovy)
  - JavaScript (web browsers, Node)
  - Bash (your GNU/Linux shell)
  - Common Language Runtime (C# and .Net framework, Microsoft)

  Code can be shared between this environments. So Clojure code you run on the
  JVM can also run in a web browser.

  Clojure is made for easy interaction with the host language. So it's easy to
  use Java libraries together with Clojure if you work with the JVM. If you are
  a React developer it's easy to use Clojure together with React on the
  frontend.

* Unix philosophy

  There is a norm within the Clojure community to adopt to the Unix philosophy.
  The Unix philosophy states that libraries/programs should do one thing and do
  it well.

  This means that it's not common with framework's in Clojure. Instead you
  compose libraries together to create what you want.

  If you are building a web application. You may need a HTTP server, that's one
  lib. If you need routing that's another. If you need websockets that's another
  lib and so on.

  You often find libraries on GitHub that is "old" and they havent been active
  for a while and in the beginning I thought they were not maintained and
  outdated. Instead they are often "done", they solve a specific problem and
  should not do anything more.

  This can make the learning curve steap as you need to know what you need and
  how to compose the libraries together to fit your need.

* Lisp and the prefix notation

  In Python the function is just before the first parenthes.

  #+BEGIN_SRC python :results output code
    print("Hey Kodkollektivet!")
  #+END_SRC

  In Lisp the function is just after the first parenthes.

  #+BEGIN_SRC clojure :results output code
    (print "Hey Kodkollektivet!")
  #+END_SRC

  The rest of the values within the parentheses is the arguments to the
  function. This notion is called prefix notation.

  #+BEGIN_SRC clojure :results output code
    (some-function arg1 arg2 arg3 ...)
  #+END_SRC

  Now you know Lisp!

  Thank you for listening! ;)

* S-expressions

  Lisp is a shortening for LISt Processing. And when you write Lisp code you
  write lists (yes, actual data structures). Lists starts and ends with ( ).

  Below is a Lisp expressions that calculcates the sum of 4 numbers. The
  function used to add the numbers is the =+= function. The addition function is
  on the first position in the list, prefix notation.

  #+BEGIN_SRC clojure :results output code
       (+ 1 2 3 4)
    ;; ^^ ^ ^ ^ ^^
    ;; || | | | ||- End of the list
    ;; || | | | |
    ;; || |------ Arguments
    ;; ||- Function to use
    ;; |- Beginning of the list
  #+END_SRC

  The same code in Python could look like this.

  #+BEGIN_SRC python :results output code
    print(1 + 2 + 3 + 4)
  #+END_SRC

* Expressions                                                      :noexport:

  Every s-expression in Clojure returns something, it may be =nil= but =nil= is
  something. There is *no statements* in Lisp code, only *expressions*.

  #+BEGIN_SRC js :results output code
    if (10 % 2 === 0) {
        evenOrOdd = "Even";
    }
    console.log(evenOrOdd);
  #+END_SRC

  #+BEGIN_SRC js :results output code
    const foo = if (10 % 2 === 0) {
        evenOrOdd = "Even";
    }
    console.log(evenOrOdd);
  #+END_SRC

  #+BEGIN_SRC clojure :results output code
    (if (= (mod 10 2) 0)
      "Even"
      "Odd")
  #+END_SRC

* Lists in lists

  When you write Clojure programs you write lists and compose them together.

  #+BEGIN_SRC clojure :results output code
    (+ 1 2 3 (+ 4 5))
  #+END_SRC

  [[./clojure-presentation-s-expressions.drawio.png]]

* Lists in lists

  More nested lists in lists.

  #+BEGIN_SRC clojure :results output code
    (+ 1 2 3
       (+ 4
          (- 4 4)))
  #+END_SRC

  [[./clojure-presentation-s-expressions-more.drawio.png]]

* Define a function

  This is how you could write a "Hello World" function.

  #+BEGIN_SRC clojure :results output code
    (defn say-hi-to [name]
      (print (str "Hello " name "!")))

    (say-hi-to "Kodkollektivet")
  #+END_SRC

  If we remove the parenthesis the code would look very much like Python.

  #+BEGIN_SRC python
    defn say-hi-to [name]
      print str "Hello " name "!"
  #+END_SRC

  The parenthesis are in the code to give the structure. You get used to them
  quickly and then you dont see them any more.

* Interactive development

  Lisps have the feature of Interactive development and gives the programmare a
  short feedback loop.

  Think of Reacts hot code reloading/fast refresh ALWAYS, EVERYWHERE!

  Interactive development is a concept where your text editor is tightly coupled
  with the running environment and you can evaluate code on the fly. You can
  save state where it fits you and interactivly build your algorithms around it.

  #+BEGIN_SRC artist :results output code
    +----------------+       +---------------------+
    |                |       |                     |
    |  Text editor   |<----->| Running environment |
    |                |       |                     |
    +----------------+       +---------------------+
  #+END_SRC

  The Running environment can be a production server, a local JVM or a web
  browser.

* Functional programming

  Clojure is not a pure functional language and you are able to do actions. When
  functions do actions the function name is postfixed with an exclamation mark
  (!).

  When talking about functional programming there are three concepts that are
  important.

** Actions,      Depend on when you you run it or how many times

   Also called:
   functions with side-effects, side-effecting functions, impure functions

   Examples:
   Send an email, read from a database, write to a database

** Calculations, Computations from input to output

   Also called:
   pure functions, mathematical functions

   Examples:
   Find the maximum number, check if an email address is valid

** Data,         Facts about events

   Examples:
   The email address a user gave us, the dollar amount read from a bank’s API

* Immutable data structures

  All of Clojures data structures are immutable and thread safe.

  This mean that when you have created them, they can't be changed.

  #+BEGIN_SRC clojure :results output code
    (def nr 1)     ;; Create a global (immutable) variable with value 1
    (println nr)   ;; Print nr
    (inc nr)       ;; Increment nr
    (println nr)
  #+END_SRC

  #+BEGIN_SRC clojure :results output code
    (def nr (atom 1))  ;; Create a global mutable variable with value 1
    (println @nr)      ;; Print nr
    (swap! nr inc)     ;; Increment nr
    (println @nr)
  #+END_SRC

  Why? Easier to reason about and easier to run in parallel.

  Persistent data structures uses structual sharing (shares memory) to
  be efficient so memory cost is not that much bigger.

* Local variables                                                  :noexport:

  Local variables are only accessible within the =let=.

  #+BEGIN_SRC clojure :results output code
    (let [a 10
          b 20]
      (+ a b) ;; a and b can be used here
      )
    ;; a and b can not be used here
    (+ a b)
  #+END_SRC

  Example:

  #+BEGIN_SRC clojure :results output code
    (let [{:keys [movies makers dbs]} incomming-http-request
          db                          (give-me/datomic dbs)
          movie-productions           (query :movie-productions movies)
          movie-makes                 (query :movie-makers makers)]
      ;; Do something with movie productions and movie makes
      )
  #+END_SRC

* Data

  When you programming in Clojure you shuffel, massage and manipulating data
  back and fourth.

  The most common data structure is the hash map, also called a =map=.

  A =map= have keys and each key has a value.

  #+BEGIN_SRC clojure :results output code
    {:key "value"}
  #+END_SRC

  #+BEGIN_SRC clojure :results output code
    {:first-name "John"
     :last-name  "Herrlin"
     :address    {:street "Södra Åreda Källehult"
                  :zip    35575
                  :city   "Åryd"}}
  #+END_SRC

* First class functions

  Functions in Clojure are first class. This is somewhat similar to JavaScript.

  In Clojure we can do:
  #+BEGIN_SRC clojure :results output code
    (defn calculate [function n1 n2]
      (function n1 n2))

    (calculate + 1 2)
  #+END_SRC

  In JS you can not:
  #+BEGIN_SRC js :results output code
    function calculate(f, n1, n2) {
      return p1 f p2;
    }

    console.log(calculate(+, 1, 2));
  #+END_SRC

  But you can:
  #+BEGIN_SRC js :results output code
    function add(n1, n2) {
      return n1 + n2;
    }

    function calculate(f, n1, n2) {
        return f(n1, n2);
    }

    console.log(calculate(add, 1, 2));
  #+END_SRC

* Where is my for loop?

  They are not there! You dont write for loops, instead you are using =map=,
  =filter= and =reduce=.

  #+BEGIN_SRC clojure :results output code
    (map inc [1 2 3 4 5])
    ;; => (2 3 4 5 6)

    (filter even? [1 2 3 4 5])
    ;; => (2 4)

    (reduce + 0 [1 2 3 4 5])
    ;; => 15
  #+END_SRC

* Macros

  - Code is data, data is code
  - Homoiconicity, if a program written in it can be manipulated as data using
    the language itself.

  As Clojure code is data you can manipulate the data to fit your needs.

  Say that you wanna use Postfix notations instead of Prefix.

  #+BEGIN_SRC clojure :results output code
    (" backwards" " am" "I" str)
  #+END_SRC

  #+BEGIN_SRC clojure :results output code
    (defmacro backwards
      [s-expression]
      (reverse s-expression))

    (backwards (" backwards" " am" "I" str))
  #+END_SRC

* DEMO Advent of code, Day 1 2019

  https://adventofcode.com/2019/day/1

  For each mass in the file, take its number, divide by three, round down, and
  subtract 2. The sum all the masses.

  For example:
  - For a mass of 12, divide by 3 and round down to get 4, then subtract 2 to get 2.
  - For a mass of 14, dividing by 3 and rounding down still yields 4, so the fuel required is also 2.
  - For a mass of 1969, the fuel required is 654.
  - For a mass of 100756, the fuel required is 33583.

** Puzzel input

   #+BEGIN_SRC text :tangle ./input.txt
     50062
     118298
     106698
     59751
     59461
     144411
     52783
     118293
     148025
     54354
     95296
     68478
     80105
     76390
     75768
     89311
     117129
     127515
     131531
     127565
     77249
     91806
     123811
     123508
     127263
     61076
     82153
     122561
     89117
     116790
     146530
     66706
     56549
     112264
     139250
     87331
     144022
     142052
     125519
     89797
     85148
     125388
     67458
     116066
     74346
     148163
     55477
     146163
     99308
     95653
     122175
     92021
     146532
     109749
     136711
     102321
     114221
     140294
     116718
     127416
     130402
     52239
     125181
     146410
     126339
     147221
     81706
     80131
     140909
     59935
     71878
     64434
     148450
     73037
     90890
     137135
     85992
     137381
     84604
     62524
     64133
     92067
     124269
     132039
     145257
     107367
     62143
     105000
     62124
     55929
     101489
     94728
     85982
     88358
     83275
     132648
     75688
     109263
     146400
     114701
   #+END_SRC

** Code

   #+BEGIN_SRC clojure :results output code
     ;; For each mass in the file, take its number, divide by three, round down, and
     ;; subtract 2. The sum all the masses.
     ;;
     ;; For example:
     ;; - For a mass of 12, divide by 3 and round down to get 4, then subtract 2 to get 2.
     ;; - For a mass of 14, dividing by 3 and rounding down still yields 4, so the fuel required is also 2.
     ;; - For a mass of 1969, the fuel required is 654.
     ;; - For a mass of 100756, the fuel required is 33583.
     (ns user
       (:require [clojure.string :as str]))
   #+END_SRC

** Solution

   #+BEGIN_SRC clojure :results output code
     ;; For each mass in the file, take its number, divide by three, round down, and
     ;; subtract 2. The sum all the masses.
     ;;
     ;; For example:
     ;; - For a mass of 12, divide by 3 and round down to get 4, then subtract 2 to get 2.
     ;; - For a mass of 14, dividing by 3 and rounding down still yields 4, so the fuel required is also 2.
     ;; - For a mass of 1969, the fuel required is 654.
     ;; - For a mass of 100756, the fuel required is 33583.
     (ns user
       (:require [clojure.string :as str]))

     (defn string->number [s]
       (Integer. s))

     (defn split-string-by-newline [s]
       (str/split s #"\n"))

     (defn calculate-fuel [mass]
       (- (int (/ mass 3)) 2))

     ;; Examples
     (- (int (/ 12 3)) 2)     ;; => 2
     (- (int (/ 14 3)) 2)     ;; => 2
     (- (int (/ 1969 3)) 2)   ;; => 654
     (- (int (/ 100756 3)) 2) ;; => 33583

     ;; Example 1
     (reduce
      (fn [sum mass]
        (+ sum (calculate-fuel mass)))
      0
      (map
       (fn [s] (string->number s))
       (split-string-by-newline
        (slurp "./input.txt"))))

     ;; Example 2
     ((comp
       #(apply + %)
       #(map calculate-fuel %)
       #(map string->number %)
       split-string-by-newline)
      (slurp "./input.txt"))

     ;; Example 3
     (->> (slurp "./input.txt")
          (split-string-by-newline)
          (map string->number)
          (map calculate-fuel)
          (apply +))
   #+END_SRC
